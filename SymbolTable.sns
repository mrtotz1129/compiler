LEXEME			 TOKEN			 STATE				 LINE
main			 meth_main		 52			 1
xSTART			 start		 2000			 2
/*SNSPROGRAMMINGLANGUAGE*/			 com_block		 601			 7
int			 dt_int		 48			 8
x			 ident		 250			 8
=			 op_assign		 116			 8
"asd"			 val_str		 502			 8
,			 comma		 124			 8
_asd			 inval_ident		 900			 8
int			 dt_int		 48			 9
a			 ident		 250			 9
,			 comma		 124			 9
b			 ident		 250			 9
,			 comma		 124			 9
c			 ident		 250			 9
,			 comma		 124			 9
i			 ident		 250			 9
,			 comma		 124			 9
n			 ident		 250			 9
;			 term_sym		 122			 9
a			 ident		 250			 10
=			 op_assign		 116			 10
0			 val_int		 500			 10
;			 term_sym		 122			 10
b			 ident		 250			 11
=			 op_assign		 116			 11
1			 val_int		 500			 11
;			 term_sym		 122			 11
n			 ident		 250			 12
=			 op_assign		 116			 12
20			 val_int		 500			 12
;			 term_sym		 122			 12
print			 st_print		 67			 13
"FIBONACCI SERIES #n"			 val_str		 502			 13
;			 term_sym		 122			 13
print			 st_print		 67			 14
a			 ident		 250			 14
&			 ccat_out		 106			 14
"#t"			 val_str		 502			 14
&			 ccat_out		 106			 14
b			 ident		 250			 14
;			 term_sym		 122			 14
for			 lp_for		 44			 15
(			 oParen		 118			 15
i			 ident		 250			 15
=			 op_assign		 116			 15
0			 val_int		 500			 15
;			 term_sym		 122			 15
i			 ident		 250			 15
<			 rel_less		 114			 15
n			 ident		 250			 15
;			 term_sym		 122			 15
i			 ident		 250			 15
++			 incre		 805			 15
)			 cParen		 119			 15
{			 oCurl		 120			 16
c			 ident		 250			 17
=			 op_assign		 116			 17
a			 ident		 250			 17
+			 math_add		 101			 17
b			 ident		 250			 17
;			 term_sym		 122			 17
a			 ident		 250			 18
=			 op_assign		 116			 18
b			 ident		 250			 18
;			 term_sym		 122			 18
b			 ident		 250			 19
=			 op_assign		 116			 19
c			 ident		 250			 19
;			 term_sym		 122			 19
print			 st_print		 67			 20
"#t"			 val_str		 502			 20
&			 ccat_out		 106			 20
c			 ident		 250			 20
;			 term_sym		 122			 20
}			 cCurl		 121			 21
int			 dt_int		 48			 25
asd			 ident		 250			 25
=			 op_assign		 116			 25
"asd"			 val_str		 502			 25
int			 dt_int		 48			 26
a			 ident		 250			 26
,			 comma		 124			 26
b			 ident		 250			 26
,			 comma		 124			 26
c			 ident		 250			 26
,			 comma		 124			 26
i			 ident		 250			 26
,			 comma		 124			 26
iNum			 ident		 250			 26
;			 term_sym		 122			 26
a			 ident		 250			 27
=			 op_assign		 116			 27
0			 val_int		 500			 27
;			 term_sym		 122			 27
b			 ident		 250			 28
=			 op_assign		 116			 28
1			 val_int		 500			 28
;			 term_sym		 122			 28
iNum			 ident		 250			 29
=			 op_assign		 116			 29
10			 val_int		 500			 29
;			 term_sym		 122			 29
print			 st_print		 67			 30
"FIBONACCI SERIES #n"			 val_str		 502			 30
;			 term_sym		 122			 30
print			 st_print		 67			 31
a			 ident		 250			 31
&			 ccat_out		 106			 31
"#t"			 val_str		 502			 31
&			 ccat_out		 106			 31
b			 ident		 250			 31
;			 term_sym		 122			 31
for			 lp_for		 44			 32
(			 oParen		 118			 32
i			 ident		 250			 32
=			 op_assign		 116			 32
0			 val_int		 500			 32
;			 term_sym		 122			 32
i			 ident		 250			 32
<			 rel_less		 114			 32
iNum			 ident		 250			 32
;			 term_sym		 122			 32
i			 ident		 250			 32
++			 incre		 805			 32
)			 cParen		 119			 32
{			 oCurl		 120			 33
c			 ident		 250			 34
=			 op_assign		 116			 34
a			 ident		 250			 34
+			 math_add		 101			 34
b			 ident		 250			 34
;			 term_sym		 122			 34
a			 ident		 250			 35
=			 op_assign		 116			 35
b			 ident		 250			 35
;			 term_sym		 122			 35
b			 ident		 250			 36
=			 op_assign		 116			 36
c			 ident		 250			 36
;			 term_sym		 122			 36
print			 st_print		 67			 37
"#t"			 val_str		 502			 37
&			 ccat_out		 106			 37
c			 ident		 250			 37
;			 term_sym		 122			 37
}			 cCurl		 121			 38
print			 st_print		 67			 40
"#n"			 val_str		 502			 40
;			 term_sym		 122			 40
for			 lp_for		 44			 41
(			 oParen		 118			 41
int			 dt_int		 48			 41
y			 ident		 250			 41
=			 op_assign		 116			 41
0			 val_int		 500			 41
;			 term_sym		 122			 41
y			 ident		 250			 41
<			 rel_less		 114			 41
10			 val_int		 500			 41
;			 term_sym		 122			 41
y			 ident		 250			 41
++			 incre		 805			 41
)			 cParen		 119			 41
print			 st_print		 67			 41
"---------"			 val_str		 502			 41
;			 term_sym		 122			 41
print			 st_print		 67			 42
"#n"			 val_str		 502			 42
;			 term_sym		 122			 42
for			 lp_for		 44			 44
(			 oParen		 118			 44
int			 dt_int		 48			 44
x			 ident		 250			 44
=			 op_assign		 116			 44
-10			 val_int		 500			 44
;			 term_sym		 122			 44
x			 ident		 250			 44
<			 rel_less		 114			 44
20			 val_int		 500			 44
;			 term_sym		 122			 44
x			 ident		 250			 44
++			 incre		 805			 44
)			 cParen		 119			 44
{			 oCurl		 120			 45
print			 st_print		 67			 46
"#n#t"			 val_str		 502			 46
;			 term_sym		 122			 46
if			 cond_if		 46			 48
(			 oParen		 118			 48
x			 ident		 250			 48
%			 math_mod		 105			 48
2			 val_int		 500			 48
==			 rel_equal		 117			 48
0			 val_int		 500			 48
)			 cParen		 119			 48
print			 st_print		 67			 48
"even: "			 val_str		 502			 48
&			 ccat_out		 106			 48
x			 ident		 250			 48
&			 ccat_out		 106			 48
"#n"			 val_str		 502			 48
;			 term_sym		 122			 48
else			 cond_else		 31			 49
print			 st_print		 67			 49
"#todd: "			 val_str		 502			 49
&			 ccat_out		 106			 49
x			 ident		 250			 49
&			 ccat_out		 106			 49
"#n"			 val_str		 502			 49
;			 term_sym		 122			 49
int			 dt_int		 48			 51
z			 ident		 250			 51
=			 op_assign		 116			 51
0			 val_int		 500			 51
;			 term_sym		 122			 51
while			 lp_while		 91			 53
(			 oParen		 118			 53
z			 ident		 250			 53
<			 rel_less		 114			 53
5			 val_int		 500			 53
)			 cParen		 119			 53
{			 oCurl		 120			 53
print			 st_print		 67			 54
"*****"			 val_str		 502			 54
;			 term_sym		 122			 54
z			 ident		 250			 55
++			 incre		 805			 55
;			 term_sym		 122			 55
}			 cCurl		 121			 56
//print "#n";			 com_single		 600			 57
}			 cCurl		 121			 57
xFINISH			 finish		 2007			 58
